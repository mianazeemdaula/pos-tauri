// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Order     Order[]
  Purchase  Purchase[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Category {
  id      String    @id @default(cuid())
  name    String
  slug    String    @unique
  Product Product[]
}

model Product {
  id             String           @id @default(cuid())
  name           String
  nameUr         String?
  code           String           @unique
  price          Float
  discount       Float
  stock          Int              @default(0)
  image          String?
  category       Category         @relation(fields: [categoryId], references: [id])
  categoryId     String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  OrderDetail    OrderDetail[]
  PurchaseDetail PurchaseDetail[]
}

model Customer {
  id        String          @id @default(cuid())
  name      String
  phone     String
  city      String
  address   String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  Order     Order[]
  wallet    CustomerWallet?
  walletId  String?
}

model Order {
  id          String        @id @default(cuid())
  total       Float
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  customer    Customer      @relation(fields: [customerId], references: [id])
  customerId  String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  OrderDetail OrderDetail[]
}

model OrderDetail {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int      @default(1)
  price     Float
  discount  Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seller {
  id        String     @id @default(cuid())
  name      String
  phone     String
  city      String
  address   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Purchase  Purchase[]
}

model Purchase {
  id             String           @id @default(cuid())
  total          Float
  seller         Seller           @relation(fields: [sellerId], references: [id])
  sellerId       String
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PurchaseDetail PurchaseDetail[]
}

model PurchaseDetail {
  id         String   @id @default(cuid())
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  purchaseId String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int      @default(1)
  price      Float
  discount   Float    @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CustomerWallet {
  id                        String                      @id @default(cuid())
  balance                   Float                       @default(0)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  CustomerWalletTransaction CustomerWalletTransaction[]
  customer                  Customer                    @relation(fields: [customerId], references: [id])
  customerId                String                      @unique
}

model CustomerWalletTransaction {
  id               String         @id @default(cuid())
  customerWallet   CustomerWallet @relation(fields: [customerWalletId], references: [id])
  customerWalletId String
  amount           Float
  type             String
  description      String?        @default("")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}
