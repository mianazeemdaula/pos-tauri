// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  name          String?
  username      String?         @unique
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  sales     Sale[]
  purchases Purchase[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@id([userId, credentialID])
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String
  slug    String    @unique
  Product Product[]
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id            Int              @id @default(autoincrement())
  name          String
  nameUr        String?
  code          String           @unique
  price         Float
  discount      Float
  stock         Int              @default(0)
  tax           Float            @default(0)
  image         String?
  category      Category         @relation(fields: [categoryId], references: [id])
  categoryId    Int
  lowStockAlert Int              @default(0)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  saleItems     SaleDetail[]
  purchaseItems PurchaseDetail[]
  brand         Brand?           @relation(fields: [brandId], references: [id])
  brandId       Int?
  PriceHistory  PriceHistory[]
}

model Party {
  id        Int        @id @default(autoincrement())
  name      String
  phone     String
  whatsApp  String?
  city      String
  address   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  sales     Sale[]
  purchases Purchase[]
  ledgers   Ledger[]
  payments  Payment[]
}

model PaymentType {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  sales       Sale[]
  Payment     Payment[]
  Transaction Transaction[]
}

model Sale {
  id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [userId], references: [id])
  userId        Int
  party         Party?       @relation(fields: [partyId], references: [id])
  partyId       Int?
  paymentType   PaymentType  @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId Int
  total         Float
  discount      Float
  discount2     Float        @default(0)
  tax           Float        @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  items         SaleDetail[]
}

model SaleDetail {
  id        Int      @id @default(autoincrement())
  sale      Sale     @relation(fields: [saleId], references: [id])
  saleId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)
  price     Float
  tax       Float    @default(0)
  discount  Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id             Int              @id @default(autoincrement())
  party          Party            @relation(fields: [partyId], references: [id])
  partyId        Int
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  total          Float
  discount       Float
  discount2      Float            @default(0)
  tax            Float            @default(0)
  purchseDate    DateTime
  invoiceNo      String
  invoiceDate    DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PurchaseDetail PurchaseDetail[]
}

model PurchaseDetail {
  id         Int      @id @default(autoincrement())
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  purchaseId Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int      @default(1)
  price      Float
  tax        Float    @default(0)
  discount   Float    @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PriceHistory {
  id             Int      @id @default(autoincrement())
  product        Product  @relation(fields: [productId], references: [id])
  productId      Int
  price          Float
  effective_date DateTime @default(now())

  @@map("price_history")
}

model Payment {
  id            Int         @id @default(autoincrement())
  party         Party       @relation(fields: [partyId], references: [id])
  partyId       Int
  paymentType   PaymentType @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId Int
  amount        Float
  note          String?
  ispayment     Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Ledger {
  id          Int      @id @default(autoincrement())
  reference   String?
  note        String?
  party       Party    @relation(fields: [partyId], references: [id])
  partyId     Int
  openBalance Float    @default(0)
  debit       Float    @default(0)
  credit      Float    @default(0)
  balance     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ledgers")
}

model SaleAgent {
  id        Int               @id @default(autoincrement())
  code      String            @unique
  name      String
  phone     String
  whatsApp  String?
  city      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  ledgers   SaleAgentLedger[]
}

model SaleAgentLedger {
  id          Int       @id @default(autoincrement())
  reference   String?
  note        String?
  saleAgent   SaleAgent @relation(fields: [saleAgentId], references: [id])
  saleAgentId Int
  openBalance Float     @default(0)
  debit       Float     @default(0)
  credit      Float     @default(0)
  balance     Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("sale_agent_ledgers")
}

model Transaction {
  id            Int         @id @default(autoincrement())
  paymentType   PaymentType @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId Int
  note          String?
  openBalance   Float       @default(0)
  debit         Float       @default(0)
  credit        Float       @default(0)
  balance       Float       @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
